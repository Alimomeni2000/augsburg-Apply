# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# start1 = (1 ,2 ,5 ,3 ,4, 0, 6 ,7 ,8)


import tracemalloc

from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QComboBox, QPushButton
from PyQt5 import QtCore, QtGui, QtWidgets
from pyparsing import one_of
from ucs import UCS
from Astar import AStar
from ids import IDS
from IDA import IDAStar
import time
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(286, 541)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.StartButton = QtWidgets.QPushButton(self.centralwidget)
        self.StartButton.setGeometry(QtCore.QRect(100, 260, 89, 25))
        self.StartButton.setObjectName("StartButton")
        self.Box_1 = QComboBox(self.centralwidget)
        self.Box_1.setGeometry(QtCore.QRect(100, 180, 86, 25))
        self.Box_1.setObjectName("Box_1")
        self.Box_1.addItem("")
        self.Box_1.addItem("")
        self.Box_1.addItem("")
        self.Box_1.addItem("")
        self.Box_2 = QComboBox(self.centralwidget)
        self.Box_2.setGeometry(QtCore.QRect(80, 220, 141, 25))
        self.Box_2.setObjectName("Box_2")
        self.Box_2.addItem("")
        self.Box_2.addItem("")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(70, 30, 41, 41))
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(120, 30, 41, 41))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(170, 30, 41, 41))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(70, 80, 41, 41))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(120, 80, 41, 41))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_6.setGeometry(QtCore.QRect(170, 80, 41, 41))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_7.setGeometry(QtCore.QRect(70, 130, 41, 41))
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_8.setGeometry(QtCore.QRect(120, 130, 41, 41))
        self.lineEdit_8.setText("")
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.lineEdit_9 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_9.setGeometry(QtCore.QRect(170, 130, 41, 41))
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 310, 81, 20))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(50, 340, 200, 20))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(50,400, 500, 30))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(50,370, 500, 30))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(50,430, 700, 30))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(50,460, 200, 30))
        self.label_6.setObjectName("label_6")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 286, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.StartButton.clicked.connect(self.pressed)
            
    def actions(start):
        action=[]
        if start == [1,2,5,3,4,0,6,7,8]:
            action=["up","left","left"]
        elif start == [1,2,5,0,3,4,6,7,8]:
            action=["right","right","up","left","left"]
        if start == [3,1,2,0,4,5,6,7,8]:
            action=["up"]
        if start == [3,1,2,4,5,0,6,7,8]:
            action=["left","left","up"]
        return action


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.StartButton.setText(_translate("MainWindow", "start"))
        self.Box_1.setItemText(0, _translate("MainWindow", "UCS"))
        self.Box_1.setItemText(1, _translate("MainWindow", "IDS"))
        self.Box_1.setItemText(2, _translate("MainWindow", "A*"))
        self.Box_1.setItemText(3, _translate("MainWindow", "IDA*"))
        self.Box_2.setItemText(0, _translate("MainWindow", "Misplaced tiles"))
        self.Box_2.setItemText(1, _translate("MainWindow", "Manhattan distance"))
        self.lineEdit.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.lineEdit_8.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:22pt;\"><br/></span></p></body></html>"))
        self.label.setText(_translate("MainWindow", "Depth = "))
        self.label_2.setText(_translate("MainWindow", "Expanded nodes = "))
        self.label_3.setText(_translate("MainWindow", "actions  = "))
        self.label_4.setText(_translate("MainWindow", "cost  = "))
        self.label_5.setText(_translate("MainWindow", "Time  = "))
        self.label_6.setText(_translate("MainWindow", "Ram  = "))
    global get_start,act
    def pressed(self):
        get_start=[]
        get_start.append (int(self.lineEdit.text()))
        get_start.append (int(self.lineEdit_2.text()))
        get_start.append (int(self.lineEdit_3.text()))
        get_start.append (int(self.lineEdit_4.text()))
        get_start.append (int(self.lineEdit_5.text()))
        get_start.append (int(self.lineEdit_6.text()))
        get_start.append (int(self.lineEdit_7.text()))
        get_start.append (int(self.lineEdit_8.text()))
        get_start.append (int(self.lineEdit_9.text()))
        act= Ui_MainWindow.actions(get_start)
        global main
        if self.Box_1.currentText()=='UCS':
            main=1
            states=[tuple(get_start)]
            a =UCS(get_start,states)
            tracemalloc.start()
            one_time = time.time()
            aa=a.u()
            ram = tracemalloc.get_traced_memory()[0]/1024
            tracemalloc.stop()
            end_time= time.time()-one_time
            tracemalloc.stop()
            for i in aa[2]:

                MainWindow.hide()

                self.lineEdit.setText(f"{i[0]}")
                self.lineEdit_2.setText(f"{i[1]}")
                self.lineEdit_3.setText(f"{i[2]}")
                self.lineEdit_4.setText(f"{i[3]}")
                self.lineEdit_5.setText(f"{i[4]}")
                self.lineEdit_6.setText(f"{i[5]}")
                self.lineEdit_7.setText(f"{i[6]}")
                self.lineEdit_8.setText(f"{i[7]}")
                self.lineEdit_9.setText(f"{i[8]}")
                MainWindow.show()

                time.sleep(.1)
        # self.label.setText(_translate("MainWindow", "Depth = "))

            self.label.setText(f"Depth = {aa[1]}")
            self.label_2.setText(f"Expanded nodes = {aa[0]}")
            self.label_3.setText(f"actions = {act}")
            self.label_4.setText(f"cost = {aa[1]}")
            self.label_5.setText(f"Time = {end_time}")
            self.label_6.setText(f"Ram = {ram}")

        if self.Box_1.currentText()=='A*':
            b=self.Box_2.currentText()
            dict_state= {tuple(get_start):10}
            # print ("one_time",one_time)
            a =AStar(tuple(get_start),dict_state,b)
            tracemalloc.start()
            one_time = time.time()
            star = a.A()
            end_time= time.time()-one_time
            ram = tracemalloc.get_traced_memory()[0]/1024
            tracemalloc.stop()

            for i in star[0]:
                MainWindow.hide()

                MainWindow.show()
                self.lineEdit.setText(f"{i[0]}")
                self.lineEdit_2.setText(f"{i[1]}")
                self.lineEdit_3.setText(f"{i[2]}")
                self.lineEdit_4.setText(f"{i[3]}")
                self.lineEdit_5.setText(f"{i[4]}")
                self.lineEdit_6.setText(f"{i[5]}")
                self.lineEdit_7.setText(f"{i[6]}")
                self.lineEdit_8.setText(f"{i[7]}")
                self.lineEdit_9.setText(f"{i[8]}")
                time.sleep(.3)
            self.label.setText(f"Depth = {star[2]}")
            self.label_2.setText(f"Expanded nodes = {star[1]}")
            self.label_3.setText(f"actions = {act}")
            self.label_4.setText(f"cost = {star[2]}")
            self.label_5.setText(f"Time = {end_time}")
            self.label_6.setText(f"Ram = {ram}")

        if self.Box_1.currentText()=='IDS':            
            states=[tuple(get_start)]
            i = IDS(states)
            # s=ids.IS
            tracemalloc.start()
            one_time = time.time()
            star = i.id()
            ram = tracemalloc.get_traced_memory()[0]/1024
            tracemalloc.stop()
            end_time= time.time()-one_time
            for i in star[1]:

                MainWindow.hide()
                MainWindow.update()
                MainWindow.show()
                self.lineEdit.setText(f"{i[0]}")
                self.lineEdit_2.setText(f"{i[1]}")
                self.lineEdit_3.setText(f"{i[2]}")
                self.lineEdit_4.setText(f"{i[3]}")
                self.lineEdit_5.setText(f"{i[4]}")
                self.lineEdit_6.setText(f"{i[5]}")
                self.lineEdit_7.setText(f"{i[6]}")
                self.lineEdit_8.setText(f"{i[7]}")
                self.lineEdit_9.setText(f"{i[8]}")
                time.sleep(0.2)
            self.label.setText(f"Depth = {star[3]}")
            self.label_2.setText(f"Expanded nodes = {star[2]}")
            self.label_3.setText(f"actions = {act}")
            self.label_4.setText(f"cost = {star[3]}")
            self.label_5.setText(f"Time = {end_time}")
            self.label_6.setText(f"Ram = {ram}")

        if self.Box_1.currentText()=='IDA*':
            b=self.Box_2.currentText()
            dict_state= {tuple(get_start):10}

            a =IDAStar(tuple(get_start),b)
            tracemalloc.start()
            one_time = time.time()
            star = a.ID()
            end_time= time.time()-one_time
            ram = tracemalloc.get_traced_memory()[0]/1024
            tracemalloc.stop()
            for i in star[1]:
                MainWindow.hide()

                MainWindow.show()
                self.lineEdit.setText(f"{i[0]}")
                self.lineEdit_2.setText(f"{i[1]}")
                self.lineEdit_3.setText(f"{i[2]}")
                self.lineEdit_4.setText(f"{i[3]}")
                self.lineEdit_5.setText(f"{i[4]}")
                self.lineEdit_6.setText(f"{i[5]}")
                self.lineEdit_7.setText(f"{i[6]}")
                self.lineEdit_8.setText(f"{i[7]}")
                self.lineEdit_9.setText(f"{i[8]}")
                time.sleep(.3)
            self.label.setText(f"Depth = {star[3]-1}")
            self.label_2.setText(f"Expanded nodes = {star[2]}")
            self.label_3.setText(f"actions = {act}")
            self.label_4.setText(f"cost = {star[3]-1}")
            self.label_5.setText(f"Time = {end_time}")
            self.label_6.setText(f"Ram = {ram}")

import sys
app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)
MainWindow.show()



sys.exit(app.exec_())
